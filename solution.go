package main

import (
	"fmt"
)

func removeByIndex(r []int, index int) []int {
	return append(r[:index], r[index+1:]...)
}

func increment(n *int) {
	if *n == 255 {
		*n = 0
	} else {
		*n += 1
	}
}

func decrease(n *int) {
	if *n == 0 {
		*n = 255
	} else {
		*n -= 1
	}
}

func main() {
	input := "ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‡ğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘†ğŸ‘‰ğŸ‘‡ğŸ¤œğŸ‘†ğŸ¤›ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ˆğŸ¤›ğŸ‘‰ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘ŠğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘†ğŸ‘‰ğŸ‘†ğŸ¤›ğŸ‘‰ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘Š"

	runeInput := []rune(input)
	data := make([]int, 10)
	loops := make(map[int]int)
	stack := []int{}

	for i, inst := range runeInput {
		if string(inst) == "ğŸ¤œ" {
			stack = append(stack, i)
		} else if string(inst) == "ğŸ¤›" {
			startLoop := stack[len(stack)-1]
			loops[startLoop] = i
			loops[i] = startLoop
			stack = removeByIndex(stack, len(stack)-1)
		}
	}

	pointer := 0
	cursor := 0

	for cursor < len(runeInput) {
		curInst := string(runeInput[cursor])

		switch curInst {
		case "ğŸ‘‰":
			pointer += 1
		case "ğŸ‘ˆ":
			pointer -= 1
		case "ğŸ‘†":
			increment(&data[pointer])
		case "ğŸ‘‡":
			decrease(&data[pointer])
		case "ğŸ¤œ":
			if data[pointer] == 0 {
				cursor = loops[cursor]
			}
		case "ğŸ¤›":
			if data[pointer] != 0 {
				cursor = loops[cursor]
			}
		case "ğŸ‘Š":
			asciiCode := data[pointer]
			fmt.Printf("%s", string(rune(asciiCode)))
		}
		cursor += 1
	}

}
